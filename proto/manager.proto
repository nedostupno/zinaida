syntax = "proto3";

package protoManager;

option go_package = "./protoManager";

import "google/api/annotations.proto";


message NodeAgent {
    int64 id = 1;
    string ip = 2;
    string domain = 3;
}

message RegistrateResponse {
    NodeAgent nodeAgent = 1;
}

message RegistrateRequest {
    string ip = 1;
    string domain = 2;
}

service manager {
    rpc Registrate (RegistrateRequest) returns (RegistrateResponse);
    rpc GetNode (GetNodeRequest) returns (GetNodeResponse){
        option (google.api.http) = {
            get: "/api/nodes/{id}"
        };
    };
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/login"
            body: "*"
        };
    }
    rpc Refresh (RefreshRequest) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/api/refresh"
            body: "*"
        };
    }
}

message GetNodeRequest{
    int64 id = 1;
}

message GetNodeResponse{

    oneof result {
        NodeAgent nodeAgent = 1;
        Error error = 2;
    }
    
    message Error {
        string message = 1;
        Code code = 2;
        
        enum Code {
            INTERNAL_ERROR = 0;
            NODE_NOT_EXIST = 1;
        }
    }
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    oneof result {
        JWT jwt = 1;
        Error error = 2;
    }

    message Error {
        string message = 1;
        Code code = 2;
        
        enum Code {
            INTERNAL_ERROR = 0;
            INCORRECT_DATA = 1;
        }
    }
}

message JWT {
    string access_token = 2;
    string refresh_token = 3;
}

message RefreshRequest {
    string refresh_token = 1;
}

message RefreshResponse {
    oneof result {
        JWT jwt = 1;
        Error error = 2;
    }

    message Error {
        string message = 1;
        Code code = 2;
        
        enum Code {
            INTERNAL_ERROR = 0;
            INVALID_REFRESH_TOKEN = 1;
            MISSED_REFRESH_TOKEN = 2;
        }
    }
}